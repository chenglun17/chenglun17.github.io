(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{714:function(t,e,r){"use strict";r.r(e);var a=r(10),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"一、webpack-概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、webpack-概念"}},[t._v("#")]),t._v(" 一、Webpack 概念")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://webpack.docschina.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[e("p",[t._v("当我们习惯了在 node 中编写代码的方式后，在回到前端编写 html、css、js 这些东西会感觉到各种的不便。比如：不能放心的使用模块化规范（浏览器兼容性问题）、即使可以使用模块化规范也会"),e("strong",{staticStyle:{color:"#DD5145"}},[t._v("面临模块过多时的加载问题")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("我们就迫切的希望有一款工具可以对代码进行打包，将多个模块打包成一个文件。这样一来即解决了兼容性问题，又解决了模块过多的问题。")])]),t._v(" "),e("li",[e("p",[t._v("构建工具就起到这样一个作用，通过构建工具可以将使用 ESM 规范编写的代码转换为旧的 JS 语法，这样可以使得所有的浏览器都可以支持代码。")])]),t._v(" "),e("li",[e("p",[t._v("在使用 webpack 打包工具时，每引入一种新的类型文件时，"),e("strong",{staticStyle:{color:"#DD5145"}},[t._v("需要引入对应的 loader（加载器）")])])]),t._v(" "),e("li",[e("p",[t._v("webpack 默认情况下，只会处理 js 文件，如果我们希望可以处理其他类型的文件，则要为其引入 loader")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);