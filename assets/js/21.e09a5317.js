(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{382:function(t,e,s){t.exports=s.p+"assets/img/merge-rebase.b6352d73.png"},383:function(t,e,s){t.exports=s.p+"assets/img/merge.076989b2.png"},384:function(t,e,s){t.exports=s.p+"assets/img/rebase.6136ff99.png"},385:function(t,e,s){t.exports=s.p+"assets/img/GoldenRuleInUsingRebase.0841a845.png"},628:function(t,e,s){"use strict";s.r(e);var a=s(10),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"五、面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、面试题"}},[t._v("#")]),t._v(" 五、面试题")]),t._v(" "),e("h2",{attrs:{id:"q1-常用的-git-指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q1-常用的-git-指令"}},[t._v("#")]),t._v(" Q1.常用的 git 指令")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init                     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建 git 代码库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v("                      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加指定文件到暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v("                       "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除工作区文件，并且将这次删除放入暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交暂存区到仓库区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，并切换到该分支")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status                   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示有变更的文件")]),t._v("\n")])])]),e("p",[t._v("详细资料可以参考： "),e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《常用 Git 命令清单》"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"q2-git-pull-和-git-fetch-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q2-git-pull-和-git-fetch-的区别"}},[t._v("#")]),t._v(" Q2.git pull 和 git fetch 的区别")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会将远程仓库的变化下载下来，并和当前分支合并")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只是将远程仓库的变化下载下来，并没有和本地分支合并")]),t._v("\n")])])]),e("p",[t._v("执行 "),e("code",[t._v("git fetch")]),t._v(" 时，它会从所需的分支中提取所有新提交，并将其存储在本地存储库中的新分支中。")]),t._v(" "),e("p",[t._v("如果要在目标分支中反映这些更改，必须在 "),e("code",[t._v("git fetch")]),t._v(" 之后执行"),e("code",[t._v("git merge")]),t._v("。")]),t._v(" "),e("p",[t._v("只有在对目标分支和获取的分支进行合并后才会更新目标分支。")]),t._v(" "),e("p",[t._v("为了方便起见，请记住以下等式："),e("strong",{staticStyle:{color:"#DD5145"}},[e("code",[t._v("git pull = git fetch + git merge")])])]),t._v(" "),e("h2",{attrs:{id:"q3-rebase-和-merge-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q3-rebase-和-merge-的区别"}},[t._v("#")]),t._v(" Q3.rebase 和 merge 的区别")]),t._v(" "),e("p",[t._v("git merge 和 git rebase 都是用于分支合并，关键在 commit 记录的处理上不同。")]),t._v(" "),e("p",[t._v("以下面的一个工作场景说明其区别：")]),t._v(" "),e("blockquote",[e("p",[t._v("你在一个 feature 分支进行新特性的开发，与此同时，master 分支的也有新的提交。")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(382),alt:""}})]),t._v(" "),e("p",[t._v("为了将 master 上新的提交合并到你的 feature 分支上，你有两种选择："),e("code",[t._v("merge")]),t._v(" or "),e("code",[t._v("rebase")])]),t._v(" "),e("h3",{attrs:{id:"_1-merge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-merge"}},[t._v("#")]),t._v(" 1.merge")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch feature\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 feature 分支上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge master\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 master 上的新提交合并到你开发完毕的 feature 分支上")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge master feature\n")])])]),e("blockquote",[e("p",[t._v("那么此时在 feature 上 git 自动会产生一个新的 commit (merge commit)")])]),t._v(" "),e("p",[t._v("git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("优点：记录了真实的commit情况，包括每个分支的详情。")])]),t._v(" "),e("li",[e("p",[t._v("缺点：每次 merge 会自动产生一个 merge commit，所以在使用一些 git 的 GUI tools，特别是 commit 比较频繁时，看到分支很杂乱。")])])]),t._v(" "),e("p",[e("img",{attrs:{src:s(383),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_2-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-rebase"}},[t._v("#")]),t._v(" 2.rebase")]),t._v(" "),e("p",[t._v("本质是变基，哪么变基是什么? "),e("strong",{staticStyle:{color:"#DD5145"}},[t._v("找公共祖先")])]),t._v(" "),e("p",[e("strong",[t._v("原理（变基时发生了什么）：")])]),t._v(" "),e("ol",[e("li",[t._v("当我们发起变基时，git 会首先找到两条分支的"),e("strong",[t._v("最近的共同祖先")])]),t._v(" "),e("li",[e("strong",[t._v("对比")]),t._v("当前分支相对于祖先的"),e("strong",[t._v("历史提交")]),t._v("，并且将它们"),e("strong",[t._v("提取")]),t._v("出来"),e("strong",[t._v("存储")]),t._v("到一个"),e("strong",[t._v("临时文件")]),t._v("中")]),t._v(" "),e("li",[t._v("将当前部分"),e("strong",[t._v("指向")]),t._v("目标的"),e("strong",[t._v("基底")])]),t._v(" "),e("li",[t._v("以"),e("strong",[t._v("当前基底")]),t._v("开始，"),e("strong",[t._v("重新执行")]),t._v("历史操作")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch feature\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 feature 分支上")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 feature 分支变基到 master 分支上")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master feature\n")])])]),e("p",[t._v("git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。")]),t._v(" "),e("p",[t._v("经过这个合并后，两个分支合并后的 commit 记录就变为了"),e("strong",[t._v("线性的记录")]),t._v("了。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("优点：得到更简洁的项目历史，删除掉了 merge commit")])]),t._v(" "),e("li",[e("p",[t._v("缺点：如果合并出现代码问题不容易定位，因为 re-write 了 history")])])]),t._v(" "),e("p",[e("img",{attrs:{src:s(384),alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("合并时如果出现冲突需要按照如下步骤解决：")])]),t._v(" "),e("ul",[e("li",[t._v("修改冲突部分")]),t._v(" "),e("li",[t._v("git add")]),t._v(" "),e("li",[e("code",[t._v("git rebase --continue")])]),t._v(" "),e("li",[t._v("（如果第三步无效可以执行 "),e("code",[t._v("git rebase --skip")]),t._v("）")])]),t._v(" "),e("blockquote",[e("p",[t._v("不要在 git add 之后习惯性的执行 git commit 命令")])]),t._v(" "),e("p",[e("strong",[t._v("The Golden Rule of Rebasing rebase 的黄金法则：")])]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("never use it "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("branches")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("不要在公共分支上使用"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("如果你 rebase 你的 feature 分支：rebase 将所有 master 的 commit 移动到你的 feature 的顶端。")]),t._v(" "),e("p",[t._v("问题是：其他人还在 original master上开发，由于你使用了 rebase 移动了 master，git 会认为你的主分支的历史与其他人的有分歧，会产生冲突。")]),t._v(" "),e("p",[t._v("所以在执行 git rebase 之前 问问自己：")]),t._v(" "),e("blockquote",[e("p",[t._v("会有其他人看这个分支么？")]),t._v(" "),e("p",[t._v("if YES 不要采用这种带有破坏性的修改 commit 历史的 rebase 命令")]),t._v(" "),e("p",[t._v("if NO ok，随你便，可以使用 rebase")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(385),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_3-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[t._v("#")]),t._v(" 3.总结")]),t._v(" "),e("ul",[e("li",[t._v("如果你想要一个干净的，没有 merge commit 的线性历史树，那么你应该选择 git rebase")]),t._v(" "),e("li",[t._v("如果你想保留完整的历史记录，并且想要避免重写 commit history 的风险，你应该选择使用 git merge")])]),t._v(" "),e("h2",{attrs:{id:"q4-什么是-git-stash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q4-什么是-git-stash"}},[t._v("#")]),t._v(" Q4.什么是 git stash?")]),t._v(" "),e("p",[t._v("首先应该解释 git stash 的必要性。")]),t._v(" "),e("p",[t._v("通常情况下，当你一直在处理项目的某一部分时，如果你想要在某个时候切换分支去处理其他事情，事情会处于混乱的状态。问题是，你不想把完成了一半的工作的提交，以便你以后就可以回到当前的工作。解决这个问题的答案是 git stash。")]),t._v(" "),e("p",[t._v("再解释什么是 git stash。")]),t._v(" "),e("p",[t._v("stash 会将你的工作目录，即"),e("strong",[t._v("修改后的跟踪文件")]),t._v("和"),e("strong",[t._v("暂存的更改")]),t._v("保存在一堆未完成的更改中，你可以随时重新应用这些更改。")]),t._v(" "),e("h2",{attrs:{id:"q5-提交对象包含什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q5-提交对象包含什么"}},[t._v("#")]),t._v(" Q5.提交对象包含什么？")]),t._v(" "),e("p",[t._v("Commit 对象包含以下组件，你应该提到以下这三点：")]),t._v(" "),e("ul",[e("li",[t._v("一组文件，表示给定时间点的项目状态")]),t._v(" "),e("li",[t._v("引用父提交对象")]),t._v(" "),e("li",[t._v("SHAI 名称，一个40个字符的字符串，提交对象的唯一标识")])]),t._v(" "),e("h2",{attrs:{id:"q6-查看分支是否已合并为master"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q6-查看分支是否已合并为master"}},[t._v("#")]),t._v(" Q6.查看分支是否已合并为master")]),t._v(" "),e("p",[t._v("要知道某个分支是否已合并为 master，你可以使用以下命令：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –merged\t\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 它列出了已合并到当前分支的分支")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch –no-merged\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 它列出了尚未合并的分支")]),t._v("\n")])])]),e("h2",{attrs:{id:"q7-git-发生冲突-如何解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#q7-git-发生冲突-如何解决"}},[t._v("#")]),t._v(" Q7.git 发生冲突？如何解决")]),t._v(" "),e("ul",[e("li",[t._v("多个分支修改了同一个文件")]),t._v(" "),e("li",[t._v("多个分支修改了同一个文件的名称")])]),t._v(" "),e("p",[t._v("如果两个分支中分别修改了不同文件中的部分，是不会产生冲突，直接合并即可。")]),t._v(" "),e("p",[t._v("当"),e("code",[t._v("Git")]),t._v("无法自动合并分支时，就必须首先解决冲突，解决冲突后，再提交，合并完成")]),t._v(" "),e("p",[t._v("解决冲突就是把"),e("code",[t._v("Git")]),t._v("合并失败的文件手动编辑为我们希望的内容，再提交")]),t._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://segmentfault.com/a/1190000019315509",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://vue3js.cn/interview/git/conflict.html#%E4%B8%80%E3%80%81%E6%98%AF%E4%BB%80%E4%B9%88",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.atlassian.com/git/tutorials",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bitbucket"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.jianshu.com/p/f23f72251abc",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://www.cnblogs.com/michael-xiang/p/13179837.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("merge 和 rebase"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);