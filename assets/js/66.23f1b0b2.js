(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{557:function(v,_,t){"use strict";t.r(_);var r=t(10),o=Object(r.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"第六章-图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#第六章-图"}},[v._v("#")]),v._v(" 第六章--图")]),v._v(" "),_("h2",{attrs:{id:"_6-1-图的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-图的基本概念"}},[v._v("#")]),v._v(" 6.1 图的基本概念")]),v._v(" "),_("h3",{attrs:{id:"_1-图的定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-图的定义"}},[v._v("#")]),v._v(" 1.图的定义")]),v._v(" "),_("p",[v._v("图G由顶点集V (Vertex) 和边集E (Edge) 组成，记为G=(V, E)")]),v._v(" "),_("ul",[_("li",[v._v("V：顶点的有穷非空集合")]),v._v(" "),_("li",[v._v("E：边的有穷集合")])]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("有向图")])])]),v._v(" "),_("blockquote",[_("p",[v._v("<v,w>称为从v到w的弧，v 称为弧尾，w 称为弧头")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("strong",[v._v("无向图")])])]),v._v(" "),_("blockquote",[_("p",[v._v("边是顶点的无序对，记为（v,w）或（w,v）")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("strong",[v._v("完全图（简单完全图）")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("有 $C_n^2$ = n(n-1)/2 条边")]),v._v(" 的无向图称为**(无向)完全图**，即"),_("strong",[v._v("任意两点")]),v._v("之间都有一条边"),_("strong",[v._v("直接相连")])]),v._v(" "),_("li",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("有 $2C_n^2$ = n(n-1) 条弧")]),v._v(" 的有向图称为"),_("strong",[v._v("有向完全图")]),v._v("，即"),_("strong",[v._v("任意两点")]),v._v("之间都存在"),_("strong",[v._v("方向相反")]),v._v("的"),_("strong",[v._v("两条弧")])])])]),v._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[_("strong",[v._v("子图和生成子图")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("V' 是 V 的子集，且 E' 是 E 的子集，则称 G' 是 G 的子图")]),v._v(" "),_("li",[_("strong",[v._v("生成子图")]),v._v("必须包含"),_("strong",[v._v("全部顶点")]),v._v("，但只包含一部分边（也可以是全部）")])])]),v._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[_("strong",[v._v("连通、连通图、连通分量")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("在 "),_("strong",[v._v("无向图")]),v._v(" 中，若从顶点 v 到顶点 w 有路径存在，则称 v 和 w 是"),_("strong",[v._v("连通")]),v._v("的")])]),v._v(" "),_("li",[_("p",[v._v("若图G中任意两个顶点都是连通（不需要直接相连）的，则称图G为"),_("strong",[v._v("连通图")])])]),v._v(" "),_("li",[_("p",[v._v("无向图中的"),_("strong",[v._v("极大连通子图")]),v._v("称为无向图的"),_("strong",[v._v("连通分量")])]),v._v(" "),_("p",[_("strong",[v._v("极大连通子图")]),v._v("：该子图是G的连通子图，将G的任何不在该子图上的顶点加入，子图不在连通")]),v._v(" "),_("p",[_("strong",[v._v("极小连通子图")]),v._v("：该子图是G的连通子图，在该子图中删除任何一条边，子图不在连通")])]),v._v(" "),_("li",[_("p",[v._v("若有 n 个顶点的图G是"),_("strong",[v._v("连通图")]),v._v("，则"),_("strong",[v._v("最少")]),v._v("有 n-1 条边")])]),v._v(" "),_("li",[_("p",[v._v("若有 n 个顶点的图G是"),_("strong",[v._v("非联通图")]),v._v("，则"),_("strong",[v._v("最多")]),v._v("有 C2(n-1) 条边")])])])]),v._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[_("strong",[v._v("强连通图、强连通分量")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("在 "),_("strong",[v._v("有向图")]),v._v(" 中，若有一对顶点 v 和 w，从 v 到 w 和从 w 到 v 之间都有路径，则称这两个顶点是"),_("strong",[v._v("强连通")]),v._v("的")]),v._v(" "),_("li",[v._v("若图G中任意一对顶点都是强连通的，则此图G为"),_("strong",[v._v("强连通图")])]),v._v(" "),_("li",[v._v("有向图中的"),_("strong",[v._v("极大强连通子图")]),v._v("称为有向图的"),_("strong",[v._v("强连通分量")])]),v._v(" "),_("li",[v._v("若有 n 个顶点的图G是"),_("strong",[v._v("强连通图")]),v._v("，则最少有 n 条边（形成环路）")])])]),v._v(" "),_("ol",{attrs:{start:"7"}},[_("li",[_("strong",[v._v("生成树、生成森林")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[v._v("生成树")]),v._v("：是包含无向图的全部顶点的"),_("strong",[v._v("极小连通子图")]),v._v("，且"),_("strong",[v._v("不存在回路")]),v._v("的图，但加一条边必然形成回路")]),v._v(" "),_("p",[v._v("生成树中任意两个顶点之间的路径是唯一的")]),v._v(" "),_("p",[v._v("一个有 n 个顶点的 "),_("strong",[v._v("连通无向图")]),v._v(" 的生成树含有 n-1 条边，但是 n 个顶点 n - 1 条边的图不一定是生成树")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("生成森林")]),v._v("：在非连通图中，连通分量的生成树构成了非连通图的生成森林")])])])]),v._v(" "),_("ol",{attrs:{start:"8"}},[_("li",[_("strong",[v._v("有向树")])])]),v._v(" "),_("blockquote",[_("p",[v._v("一个顶点的入度为 0、其余顶点的入度为 1 的有向图，称为有向树")])]),v._v(" "),_("h3",{attrs:{id:"_2-其他概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-其他概念"}},[v._v("#")]),v._v(" 2.其他概念")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("顶点的度")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("无向图中，顶点 v 的度是指依附于顶点 v 的边的条数，记为 TD(v)")]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("无向图")]),v._v(" 的 "),_("strong",[v._v("全部顶点的度之和 = 边数的2倍")])])]),v._v(" "),_("li",[_("p",[v._v("有向图中，入度是以顶点 v 为终点的有向边的数目，记为 ID(v)；出度是以顶点 v 为起点的有向边的数目，记为 OD(v)")]),v._v(" "),_("p",[v._v("顶点 v 的度 = 其入度与出度之和，即 TD(v) = ID(v) + OD(v)")]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("有向图")]),v._v(" 的 "),_("strong",[v._v("全部顶点的入度之和 = 出度之和 = 边的数目")])])])])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("strong",[v._v("边的权和网")])])]),v._v(" "),_("blockquote",[_("p",[v._v("带权值的图称为带权图，也称网")])]),v._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("strong",[v._v("路径、路径长度和回路")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("路径：连续的边构成的顶点序列")])]),v._v(" "),_("li",[_("p",[v._v("路径长度：路径上边或弧的数目/权值之和")])]),v._v(" "),_("li",[_("p",[v._v("回路(环)：第一个顶点和最后一个顶点相同的顶点")]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("若一个图有 n 个顶点，并且有大于 n-1 条边")]),v._v("，则此图一定"),_("strong",[v._v("有环路")])])])])]),v._v(" "),_("h2",{attrs:{id:"_6-2-图的存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-图的存储"}},[v._v("#")]),v._v(" 6.2 图的存储")]),v._v(" "),_("h3",{attrs:{id:"_1-邻接矩阵法-顺序存储结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-邻接矩阵法-顺序存储结构"}},[v._v("#")]),v._v(" 1.邻接矩阵法(顺序存储结构)")]),v._v(" "),_("p",[v._v("适用于稠密图")]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("顶点表：用一个一维数组存储图中顶点的信息")])]),v._v(" "),_("li",[_("p",[v._v("邻接矩阵：用一个二维数组存储图中边的信息")]),v._v(" "),_("p",[v._v("在定义邻接矩阵时，顶点在邻接矩阵中的顺序必须按照顶点数组的顺序")])]),v._v(" "),_("li",[_("p",[v._v("邻接矩阵表示法的空间复杂度为 O(|v|^2)")]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("只与顶点数目有关")]),v._v("，与边数无关")])])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[v._v("无向图")]),v._v(" 的邻接矩阵是一个对称矩阵且 "),_("strong",[v._v("唯一")])]),v._v(" "),_("p",[v._v("对于特定顶点每行或每列的非零元素的个数 = 该顶点的度")]),v._v(" "),_("p",[v._v("无向图的邻接矩阵是 "),_("strong",[v._v("对称矩阵")]),v._v("，可以采用 "),_("strong",[v._v("压缩存储")]),v._v(" 来减少规模")])])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[v._v("有向图")]),v._v(" 的邻接矩阵可能是一个对称矩阵")]),v._v(" "),_("p",[v._v("**行 **为 "),_("strong",[v._v("出度")]),v._v(" 边")]),v._v(" "),_("p",[_("strong",[v._v("列")]),v._v(" 为 **入度 **边")]),v._v(" "),_("p",[v._v("邻接矩阵中非∞元素（或非零元素）的个数 = 图的弧的数目")])])])]),v._v(" "),_("h3",{attrs:{id:"_2-邻接表法-链式存储结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-邻接表法-链式存储结构"}},[v._v("#")]),v._v(" 2.邻接表法（链式存储结构）")]),v._v(" "),_("p",[v._v("适用于稀疏图")]),v._v(" "),_("blockquote",[_("p",[v._v("图的邻接表 "),_("strong",[v._v("不唯一")]),v._v("，取决于建立邻接表的算法及边的 "),_("strong",[v._v("输入顺序")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[v._v("无向图")]),v._v(" 的空间复杂度为 O(n+2e)，每条边存储两次")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("有向图")]),v._v(" 的空间复杂度为 O(n+e)")]),v._v(" "),_("p",[_("strong",[v._v("正向")]),v._v("邻接表："),_("strong",[v._v("边结点")]),v._v("表示"),_("strong",[v._v("出度")]),v._v("信息")]),v._v(" "),_("p",[v._v("逆向邻接表：边结点表示入度信息")])])])]),v._v(" "),_("p",[v._v("邻接表中存在两种结点："),_("strong",[v._v("顶点表结点")]),v._v("和"),_("strong",[v._v("边表结点")]),v._v("。")]),v._v(" "),_("p",[v._v("顶点表结点："),_("strong",[v._v("| data | firstarc |")])]),v._v(" "),_("ul",[_("li",[v._v("data：顶点域")]),v._v(" "),_("li",[v._v("fristarc：边表头指针")])]),v._v(" "),_("p",[v._v("边表结点： "),_("strong",[v._v("| adjvex | nextarc | info |")])]),v._v(" "),_("ul",[_("li",[v._v("adjvex：邻接点域")]),v._v(" "),_("li",[v._v("nextarc：指针域")]),v._v(" "),_("li",[v._v("info：权值")])]),v._v(" "),_("h3",{attrs:{id:"_3-十字链表-存储有向图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-十字链表-存储有向图"}},[v._v("#")]),v._v(" 3.十字链表（存储有向图）")]),v._v(" "),_("h3",{attrs:{id:"_4-邻接多重表-存储无向图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-邻接多重表-存储无向图"}},[v._v("#")]),v._v(" 4.邻接多重表（存储无向图）")]),v._v(" "),_("h2",{attrs:{id:"_6-3-图的遍历"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-图的遍历"}},[v._v("#")]),v._v(" 6.3 图的遍历")]),v._v(" "),_("p",[v._v("图的遍历是指从图中的某一点出发，按照某种搜索算法沿着图中的边对图中的所有顶点访问一次且仅访问一次")]),v._v(" "),_("h3",{attrs:{id:"_1-深度优先搜索-dfs"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-深度优先搜索-dfs"}},[v._v("#")]),v._v(" 1.深度优先搜索(DFS)")]),v._v(" "),_("blockquote",[_("p",[v._v("类似于树的"),_("strong",[v._v("先序遍历")])]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("可以回退（回溯）")]),v._v(" 到最近被访问的顶点")]),v._v(" "),_("p",[v._v("对"),_("strong",[v._v("连通图")]),v._v("调用 DFS 才能产生"),_("strong",[v._v("深度优先生成树")]),v._v("，否则产生的是"),_("strong",[v._v("深度优先生成森林")])])]),v._v(" "),_("blockquote",[_("p",[v._v("DFS算法是一种"),_("strong",[v._v("递归算法")]),v._v("，需要借助"),_("strong",[v._v("栈")]),v._v("，空间复杂度为 O(|V|)")]),v._v(" "),_("p",[v._v("时间复杂度只与存储结构有关")]),v._v(" "),_("ul",[_("li",[v._v("以邻接矩阵表示时，时间复杂度为 O(|V|^2)")]),v._v(" "),_("li",[v._v("以(正)邻接表表示时，时间复杂度为 O(|V| + |E|)")])])]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("深度优先搜索（DFS）可以判断 有向图 是否有环")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"_2-广度优先搜索-bfs"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-广度优先搜索-bfs"}},[v._v("#")]),v._v(" 2.广度优先搜索(BFS)")]),v._v(" "),_("blockquote",[_("p",[v._v("类似于二叉树的"),_("strong",[v._v("层序遍历")])]),v._v(" "),_("p",[v._v("不会出现往回退的情况")]),v._v(" "),_("p",[v._v("在广度遍历的过程中，可以得到一颗广度优先生成树")])]),v._v(" "),_("blockquote",[_("p",[v._v("BFS算法是一种"),_("strong",[v._v("非递归")]),v._v("算法，需要借助"),_("strong",[v._v("队列")]),v._v("，空间复杂度为 O(|V|)")]),v._v(" "),_("ul",[_("li",[v._v("以邻接矩阵表示时，时间复杂度为 O(|V|^2)")]),v._v(" "),_("li",[v._v("以邻接表表示时，时间复杂度为 O(|V| + |E|)")])])]),v._v(" "),_("p",[_("strong",{staticStyle:{color:"#DD5145"}},[v._v("广度优先搜索（BFS）可以用来求解 非带权图 的单源最短路径问题")]),v._v("。")]),v._v(" "),_("h3",{attrs:{id:"_3-图的遍历与图的连通性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-图的遍历与图的连通性"}},[v._v("#")]),v._v(" 3.图的遍历与图的连通性")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("无向图")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("连通图：仅需要一次遍历")]),v._v(" "),_("li",[v._v("非连通图：DFS/BFS 函数调用的次数 = 连通分量个数")])])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("strong",[v._v("有向图")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("强连通图：从任一顶点出发都只需要调用一次 DFS/BFS")])])]),v._v(" "),_("h2",{attrs:{id:"_6-4-图的应用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-图的应用"}},[v._v("#")]),v._v(" 6.4 图的应用")]),v._v(" "),_("h3",{attrs:{id:"_1-最小生成树-mst"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-最小生成树-mst"}},[v._v("#")]),v._v(" 1.最小生成树 MST")]),v._v(" "),_("blockquote",[_("p",[v._v("最小生成(代价)树"),_("strong",[v._v("不是唯一")]),v._v("的，但边的权值之和（代价）是"),_("strong",[v._v("唯一")]),v._v("的")]),v._v(" "),_("p",[v._v("最小生成树的边数 = 顶点数 - 1，即 E=V-1")]),v._v(" "),_("p",[_("strong",[v._v("最小权值")]),v._v("一定会出现在所有的 MST 中")]),v._v(" "),_("p",[_("strong",[v._v("最小权值的边")]),v._v("不一定出现在所有的 MST 中，但一定会出现在某颗 MST 中")])]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("Prim（普里姆）算法")])]),v._v(" "),_("p",[v._v("选择顶点，适用于"),_("strong",[v._v("稠密图")]),v._v("，时间复杂度为 O(|V|^2)")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("步骤：1.初始时从图中"),_("strong",[v._v("任取一顶点")]),v._v("加入顶点集合 T")]),v._v(" "),_("p",[v._v("​\t\t   2.每次从图中选择一个与当前 T 中"),_("strong",[v._v("距离最近")]),v._v("的顶点，并将该顶点加入 T 中")])])]),v._v(" "),_("p",[v._v("类似贪吃蛇")])]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("Kruskal（克鲁斯卡尔）算法")])]),v._v(" "),_("p",[v._v("选择边，适用于"),_("strong",[v._v("稀疏图")]),v._v("，时间复杂度为 O(|E| log |E|)")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("步骤：1.先对"),_("strong",[v._v("边的权值")]),v._v("进行按依次"),_("strong",[v._v("递增排序")])]),v._v(" "),_("p",[v._v("​\t\t   2.每次都"),_("strong",[v._v("选取")]),v._v("权值"),_("strong",[v._v("最小边")]),v._v("，且 ==不能形成环路==")])])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("当图的"),_("strong",[v._v("权值都不相等")]),v._v("时：")]),v._v(" "),_("p",[v._v("不同算法（Prim或Kruskal）构造的最小生成树是唯一的，但不同算法的构造过程可能是不唯一的")]),v._v(" "),_("p",[_("strong",[v._v("同一个算法")]),v._v("的构造过程是"),_("strong",[v._v("唯一")]),v._v("的，并且构成的最小生成树也是"),_("strong",[v._v("唯一")]),v._v("的")])]),v._v(" "),_("li",[_("p",[v._v("当图的"),_("strong",[v._v("权值相等")]),v._v("时：")]),v._v(" "),_("p",[v._v("同一个算法的最小生成树的构造过程可能不唯一")]),v._v(" "),_("p",[v._v("不同算法的最小生成树的构造过程可能不唯一")]),v._v(" "),_("p",[v._v("不同算法构造的最小生成树可能不唯一")])])])]),v._v(" "),_("h3",{attrs:{id:"_2-最短路径"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-最短路径"}},[v._v("#")]),v._v(" 2.最短路径")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("Dijkstra（迪杰斯特拉）算法")]),v._v("，求"),_("strong",[v._v("单源最短路径")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("适用于带权图")]),v._v(" "),_("li",[v._v("无论是采用 邻接矩阵 还是 邻接表 表示时，时间复杂度都为 O(|V|^2)")]),v._v(" "),_("li",[v._v("Dijkstra 算法不适用于边上带有负权值情况，也"),_("strong",[v._v("不适用于负回路")]),v._v("（带负权值的边组成的回路）")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("Prim 解决的问题是找到 n-1 条边，使这 n-1 条边的权值之和最小")])]),v._v(" "),_("li",[_("p",[v._v("Dijkstra 是找到顶点（源点）到其他所有点的最短距离，始终要保持其他点到顶点（源点）的距离最短")])])])]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("Floyd（弗洛伊德）算法")]),v._v("，求"),_("strong",[v._v("各顶点之间最短路径")])]),v._v(" "),_("p",[v._v("适用于带权图")]),v._v(" "),_("p",[v._v("Floyd 算法允许图中有带有负权值的边，但"),_("strong",[v._v("不允许负回路")])]),v._v(" "),_("p",[v._v("时间复杂度为 O(|V|^3)")]),v._v(" "),_("p",[v._v("也可以用 单源最短路径算法 来解决 各顶点之间的最短路径 问题，时间复杂度为 O(|V|^2) * |V| = O(|V|^3)")])])]),v._v(" "),_("h3",{attrs:{id:"_3-拓扑排序-aov"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-拓扑排序-aov"}},[v._v("#")]),v._v(" 3.拓扑排序（AOV）")]),v._v(" "),_("blockquote",[_("p",[_("strong",[v._v("有向 无环图")]),v._v("，DAG，Directed Acycline Graph")])]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("AOV网")]),v._v("，Activity On Vertex network，顶点表示活动的网络")])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("在 AOV网中不能有环，即 "),_("strong",[v._v("有环一定没有拓扑序列，有拓扑序列一定没有环")])])]),v._v(" "),_("li",[_("p",[v._v("采用邻接矩阵表示时，时间复杂度为 O(|V|^2)")])]),v._v(" "),_("li",[_("p",[v._v("采用邻接表表示时，时间复杂度为 O(|V| + |E|)")])]),v._v(" "),_("li",[_("p",[v._v("一个 AOV 网的拓扑排序"),_("strong",[v._v("不唯一")])])])])]),v._v(" "),_("ul",[_("li",[v._v("拓扑排序步骤：")])]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("从AOV网中选择一个"),_("strong",[v._v("没有前驱")]),v._v("（入度为0）的顶点并"),_("strong",[v._v("输出顶点")])]),v._v(" "),_("li",[v._v("从网中"),_("strong",[v._v("删除")]),v._v("该"),_("strong",[v._v("顶点")]),v._v("和所有以它为起点的"),_("strong",[v._v("有向边")])]),v._v(" "),_("li",[v._v("重复1. 2.，直到当前的AOV网为空 或者 当前网中不存在无前驱的顶点（存在环路）为止")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("有向无环图的拓扑序列唯一，图也不一定唯一")]),v._v(" "),_("li",[v._v("==拓扑排序可以判断有向图是否存在回路==")])])]),v._v(" "),_("h3",{attrs:{id:"_4-关键路径-aoe"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-关键路径-aoe"}},[v._v("#")]),v._v(" 4.关键路径（AOE）")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("AOE网")]),v._v("，Activity On Edge network，"),_("strong",[v._v("边")]),v._v("表示"),_("strong",[v._v("活动")]),v._v("，"),_("strong",[v._v("顶点")]),v._v("表示"),_("strong",[v._v("事件")]),v._v("的网络，是"),_("strong",[v._v("带权 有向 无环图")])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[v._v("路径长度：路径上各个活动所持续的时间之和")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("关键路径")]),v._v("：从源点到汇点的所有路径中，具有"),_("strong",[v._v("最大的路径长度")]),v._v("的路径")])]),v._v(" "),_("li",[_("p",[v._v("关键路径的长度：完成整个工程的最短时间")])]),v._v(" "),_("li",[_("p",[v._v("关键活动：关键路径上的活动")])]),v._v(" "),_("li",[_("p",[v._v("网中的关键路径是"),_("strong",[v._v("不唯一")]),v._v("的")])])])]),v._v(" "),_("ul",[_("li",[v._v("求关键路径是以"),_("strong",[v._v("拓扑排序")]),v._v("为基础的")])]),v._v(" "),_("blockquote",[_("ul",[_("li",[_("p",[_("strong",[v._v("事件 vk")]),v._v(" 的最早发生时间 "),_("strong",[v._v("ve(k)")]),v._v("，最迟发生时间 "),_("strong",[v._v("vl(k)")])])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("活动 ai")]),v._v(" 的最早开始时间 "),_("strong",[v._v("e(i)")]),v._v("，最晚开始时间 "),_("strong",[v._v("l(i)")])])]),v._v(" "),_("li",[_("p",[v._v("时间余量（松弛量）："),_("strong",[v._v("d(i) = l(i) - e(i)")])])]),v._v(" "),_("li",[_("p",[v._v("l(i) - e(i) = 0 ，即 "),_("strong",[v._v("l(i) = e(i)")]),v._v(" 是活动 ai 是 "),_("strong",[v._v("关键活动")])])])])]),v._v(" "),_("blockquote",[_("ul",[_("li",[v._v("活动的最早开始时间：采用正推法，从源点开始，取最大的路径")]),v._v(" "),_("li",[v._v("活动的最晚开始时间：采用反推法，从终点（汇点）开始，取最小的路径")])])]),v._v(" "),_("ul",[_("li",[v._v("求关键路径的步骤")])]),v._v(" "),_("blockquote",[_("ol",[_("li",[v._v("从"),_("strong",[v._v("源点")]),v._v("出发，令ve(源点) = 0，按拓扑有序求其余顶点的"),_("strong",[v._v("最早")]),v._v("发生时间 ve(k) = "),_("strong",[v._v("Max")]),v._v("{ ve(j) + Weight(vj,vk) }，可求出==关键路径==")]),v._v(" "),_("li",[v._v("从"),_("strong",[v._v("汇点")]),v._v("出发，令vl(汇点) = ve(汇点)，按逆拓扑有序求其余顶点的"),_("strong",[v._v("最迟")]),v._v("发生时间 vl(k) = "),_("strong",[v._v("Min")]),v._v("{ ve(j) - Weight(vj,vk) }")]),v._v(" "),_("li",[v._v("弧的最早开始时间 e(i) = 该弧的"),_("strong",[v._v("起点")]),v._v("的顶点的 ve(k)")]),v._v(" "),_("li",[v._v("弧的最晚开始时间 l(i) = 该弧的"),_("strong",[v._v("终点")]),v._v("的顶点的 vl(k) - 该弧持续时间 ai")]),v._v(" "),_("li",[v._v("求 AOE 网中的所有活动的差额 d(i) = l(i) - e(i) ，找出所有 d(i) = 0 的活动构成关键路径")])])])])}),[],!1,null,null,null);_.default=o.exports}}]);