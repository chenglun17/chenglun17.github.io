(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{618:function(t,a,e){"use strict";e.r(a);var s=e(10),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"自定义组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件"}},[t._v("#")]),t._v(" 自定义组件")]),t._v(" "),a("h2",{attrs:{id:"组件的创建与引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件的创建与引用"}},[t._v("#")]),t._v(" 组件的创建与引用")]),t._v(" "),a("h3",{attrs:{id:"_1-创建组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-创建组件"}},[t._v("#")]),t._v(" 1.创建组件")]),t._v(" "),a("ol",[a("li",[t._v("在项目的根目录中，鼠标右键，创建 ==components== -> ==test== 文件夹")]),t._v(" "),a("li",[t._v('在新建的 components -> test 文件夹上，鼠标右键，点击 "==新建Component=="')]),t._v(" "),a("li",[t._v("键入组件的名称之后回车，会自动生成组件对应的4个文件，后缀名分别为 .js，.json，.wxml，和 .wxss")])]),t._v(" "),a("p",[t._v("注意：为了保证目录结构的清晰，建议把不同的组件，存放到单独目录中")]),t._v(" "),a("h3",{attrs:{id:"_2-引用组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用组件"}},[t._v("#")]),t._v(" 2.引用组件")]),t._v(" "),a("p",[t._v('组件的引用方式分为："==局部引用==" 和 "==全局引用=="：')]),t._v(" "),a("ul",[a("li",[t._v("局部引用：组件只能在当前被引用的页面内使用")]),t._v(" "),a("li",[t._v("全局引用：组件可以在每个小程序页面中使用")])]),t._v(" "),a("h3",{attrs:{id:"_3-局部引用组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-局部引用组件"}},[t._v("#")]),t._v(" 3.局部引用组件")]),t._v(" "),a("p",[t._v("在页面的 .json配置文件中引用组件的方式，叫做 “局部引用”。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//在页面的 .json 文件中，引用组件\n{\n\t"usingComponents": {\n\t\t"my-test1":"/components/test1/test1"\n\t}\n}\n\n//在页面的 .wxml 文件中，使用组件\n<my-test1></my-test1>\n')])])]),a("h3",{attrs:{id:"_4-全局引用组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-全局引用组件"}},[t._v("#")]),t._v(" 4.全局引用组件")]),t._v(" "),a("p",[t._v("在 app.json 全局配置文件中引用组件的方式，叫做 “全局引用”。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//在 app.json 文件中，引用组件\n{\n\t"pages": {/*省略不必要的代码*/}\n\t"window": {/*省略不必要的代码*/}\n\t"usingComponents": {\n\t\t"my-test2":"/components/test2/test2"\n\t}\n}\n\n//在页面的 .wxml 文件中，使用组件\n<my-test2></my-test2>\n')])])]),a("h3",{attrs:{id:"_5-全局引用和局部引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-全局引用和局部引用"}},[t._v("#")]),t._v(" 5.全局引用和局部引用")]),t._v(" "),a("p",[t._v("根据组件的==使用频率==和==范围==，来选择合适的引用方式：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v('如果某组件==在多个页面中经常被用到==，建议进行 "全局引用"')])]),t._v(" "),a("li",[a("p",[t._v('如果某组件==只在特定的页面中被用到==，建议进行 "局部引用"')])])]),t._v(" "),a("h3",{attrs:{id:"_6-组件和页面的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-组件和页面的区别"}},[t._v("#")]),t._v(" 6.组件和页面的区别")]),t._v(" "),a("p",[t._v("从表面来看，组件和页面都是由 .js，.json，.wxml，和 .wxss 这个四个文件组成的。但是，组件和页面的 .js与 .json 文件有明显的不同：")]),t._v(" "),a("ul",[a("li",[t._v('组件的 .json 文件中需要声明 =="component"：true== 属性')]),t._v(" "),a("li",[t._v("组件的 .js 文件中调用的是 ==Component()== 函数，页面的 .js 文件中调用的是 ==Page()== 函数")]),t._v(" "),a("li",[t._v("组件的事件处理函数需要定义到 ==methods节点== 中，页面的 .js 文件中只需要定义到与 ==data节点== 平级")])]),t._v(" "),a("h2",{attrs:{id:"样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式"}},[t._v("#")]),t._v(" 样式")]),t._v(" "),a("h3",{attrs:{id:"_1-组件样式隔离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-组件样式隔离"}},[t._v("#")]),t._v(" 1.组件样式隔离")]),t._v(" "),a("p",[t._v("默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构：")]),t._v(" "),a("p",[t._v("好处：")]),t._v(" "),a("ol",[a("li",[t._v("防止外界的样式影响组件内部的样式")]),t._v(" "),a("li",[t._v("防止组件的样式破坏外界的样式")])]),t._v(" "),a("h3",{attrs:{id:"_2-组件样式隔离的注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件样式隔离的注意点"}},[t._v("#")]),t._v(" 2.组件样式隔离的注意点")]),t._v(" "),a("ul",[a("li",[t._v("app.wxss 中的全局样式对组件无效")]),t._v(" "),a("li",[t._v("只有 class 选择器会有样式隔离效果，id选择器、属性选择器、标签选择器不受样式隔离的影响")])]),t._v(" "),a("p",[t._v("建议：在==组件==和==引用组件的页面==中建议使用 "),a("strong",[t._v("class 选择器")]),t._v("，==不要使用 id、属性、标签选择器==！")]),t._v(" "),a("h3",{attrs:{id:"_3-修改组件的样式隔离选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-修改组件的样式隔离选项"}},[t._v("#")]),t._v(" 3.修改组件的样式隔离选项")]),t._v(" "),a("p",[t._v("默认情况下，自定义组件的 ==样式隔离特性== 能够 ==防止组件内外样式相互干扰的问题==。但有时，我们希望在外界能够控制组件内部的样式，此时，可以通过 ==styleIsolation== 修改组件的样式隔离选项，用法如下：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//在组件的 .js 文件中新增如下配置\nComponent({\n\toptions: {\n\t\tstyleIsolation: 'isolated'\n\t}\n})\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//或在组件的 .json 文件中新增如下配置\n{\n\t"styleIsolation": "isolated"\n}\n')])])]),a("h3",{attrs:{id:"_4-styleisolation-的可选值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-styleisolation-的可选值"}},[t._v("#")]),t._v(" 4.styleIsolation 的可选值")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("可选值")]),t._v(" "),a("th",[t._v("默认值")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("isolated")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("表示==启用样式隔离==，在自定义组件内外，使用class指定的样式将==不会相互影响==")])]),t._v(" "),a("tr",[a("td",[t._v("apply-shared")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("表示==页面 wxss 样式将影响到自定义组件==，但自定义组件 wxss 中指定的样式不会影响页面")])]),t._v(" "),a("tr",[a("td",[t._v("==shared==")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中特指的样式也会影响页面和其他设置了 apply-shared 或 shared 的自定义组件")])])])]),t._v(" "),a("h2",{attrs:{id:"数据、方法和属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据、方法和属性"}},[t._v("#")]),t._v(" 数据、方法和属性")]),t._v(" "),a("h3",{attrs:{id:"_1-data-数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-data-数据"}},[t._v("#")]),t._v(" 1.data 数据")]),t._v(" "),a("p",[t._v("在小程序组件中，==用于组件模板渲染== 的 ==私有数据==，需要定义到 ==data 节点==中，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tdata: {\n\t\tcount: 0\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_2-methods-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-methods-方法"}},[t._v("#")]),t._v(" 2.methods 方法")]),t._v(" "),a("p",[t._v("在小程序组件中，==事件处理函数== 和 ==自定义方法== 需要定义到 ==methods 节点== 中，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tmethods: {\t\t\t//组件的方法列表【包含事件处理函数和自定义方法】\n\t\taddCount(){\t\t//事件处理函数\n\t\t\tthis.setData({\n\t\t\t\tcount: this.data.count + 1\n\t\t\t})\n\t\t\tthis._showCount()\t//通过 this 直接调用自定义方法\n\t\t},\n\t\t\n\t\t_showCount(){\t\t//自定义方法建议以 _ 开头\n\t\t\twx.showToast({\n\t\t\t\ttitle: 'count值为：' + this.data.count,\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t}\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_3-properties-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-properties-属性"}},[t._v("#")]),t._v(" 3.properties 属性")]),t._v(" "),a("p",[t._v("在小程序组件中，properties 是组件的对外属性，==用来接收外界传递到组件中的数据==，声明方式有两种，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//组件的 .js\nComponent({\n\t//属性定义\n\tproperties: {\n\t\tmax: {\t\t\t\t//完整定义属性的方式【当需要指定属性默认值时，建议使用此方式】\n\t\t\ttype: Number,\t//属性值的数据类型\n\t\t\tvalue: 10\t\t//属性默认值\n\t\t},\n\t\t\n\t\tmax: Number\t\t\t//简化定义属性的方式【不需要指定属性默认值时，可以使用简化方式】\n\t}\n})\n\n//组件的 .wxml\n<my-test1 max="10"></my-test1>\n')])])]),a("h3",{attrs:{id:"_4-data-和-properties-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-data-和-properties-的区别"}},[t._v("#")]),t._v(" 4.data 和 properties 的区别")]),t._v(" "),a("p",[t._v("在小程序的组件中，properties 属性和 data 数据的用法相同，它们都是==可读可写==的，只不过：")]),t._v(" "),a("ul",[a("li",[t._v("data 更倾向于==存储组件的私有数据==")]),t._v(" "),a("li",[t._v("properties 更倾向于==存储外界传递到组件的数据==")])]),t._v(" "),a("h3",{attrs:{id:"_5-使用-setdata-修改-properties-的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用-setdata-修改-properties-的值"}},[t._v("#")]),t._v(" 5.使用 setData 修改 properties 的值")]),t._v(" "),a("p",[t._v("由于 ==data数据== 和 ==properties 属性== 在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染，或使用 setData 为 properties 中的属性重新赋值，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//在组件的 .wxml 文件中使用 properties 属性的值\n<view>max属性的值为：{{max}}</view>\n\n//组件的 .js\nComponent({\n\tproperties: {max: Number},\t//定义属性\n\tmethods: {\n\t\taddCount() {\n\t\t\tthis.setData({\n\t\t\t\tmax: this.properties.max + 1\t//使用 setData修改属性的值\n\t\t\t})\n\t\t}\n\t}\n})\n")])])]),a("h2",{attrs:{id:"数据监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据监听器"}},[t._v("#")]),t._v(" 数据监听器")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是数据监听器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是数据监听器"}},[t._v("#")]),t._v(" 1.什么是数据监听器")]),t._v(" "),a("p",[t._v("数据监听器用于==监听和响应任何属性和数据字段的变化，从而执行特定的操作==。它的作用类似于 vue 中的 watch 侦听器。")]),t._v(" "),a("p",[t._v("在小程序组件中，数据监听器的"),a("em",[t._v("基本语法格式如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tobservers: {\n\t\t'字段A,字段B': function(字段A的新值,字段B的新值){\n\t\t\t//do something\n\t\t}\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_2-数据监听器的基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据监听器的基本用法"}},[t._v("#")]),t._v(" 2.数据监听器的基本用法")]),t._v(" "),a("p",[a("em",[t._v("组件的 UI 结构如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<view>{{n1}} + {{n2}} = {{sum}}</view>\n<button size="mini" bindtap="addN1">n1自增</button>\n<button size="mini" bindtap="addN2">n2自增</button>\n')])])]),a("p",[a("em",[t._v("组件的 .js 文件代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tdata: {n1:0, n2:0, sum:0},\t//数据节点\n\tmethods: {\t\t//方法列表\n\t\taddN1(){\n\t\tthis.setData({n1: this.data.n1 + 1})\n\t\t},\n\t\taddN2(){\n\t\tthis.setData({n2: this.data.n2 + 2})\n\t\t}\n\t},\n\tobservers: {\n\t\t'n1,n2': function(newN1,newN2){\t\t\t//监听 n1 和 n2 数据的变化，键值对形式\n\t\t\tthis.setData({sum: newN1 + newN2})\t//通过监听器，自动计算 sum 的值\n\t\t}\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_3-监听对象属性的变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-监听对象属性的变化"}},[t._v("#")]),t._v(" 3.监听对象属性的变化")]),t._v(" "),a("p",[t._v("数据监听器支持监听对象中==单个==或==多个属性==的变化，"),a("em",[t._v("示例语法如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tobservers: {\n\t\t'对象.属性A,对象.属性B': function(属性A的新值,属性B的新值){\n\t\t\t//触发此监听器的3种情况\n\t\t\t//【为属性A赋值】使用 setData 设置 this.data.对象.属性A 时触发\n\t\t\t//【为属性B赋值】使用 setData 设置 this.data.对象.属性B 时触发\n\t\t\t//【直接为对象赋值】使用 setData 设置 this.data.对象 时触发\n\t\t\t//do something\n\t\t}\n\t}\n})\n")])])]),a("h2",{attrs:{id:"纯数据字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯数据字段"}},[t._v("#")]),t._v(" 纯数据字段")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是纯数据字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是纯数据字段"}},[t._v("#")]),t._v(" 1.什么是纯数据字段")]),t._v(" "),a("p",[t._v("概念：==纯数据字段==指的是那些==只用于业务逻辑的处理==，==不用于界面渲染的data字段==")]),t._v(" "),a("p",[t._v("应用场景：例如有些情况下，某些 data 中的字段==既不会展示在页面上，也不会传递给其他组件==，仅仅在当前组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段")]),t._v(" "),a("p",[t._v("好处：纯数据字段==有助于提升页面更新的性能==。")]),t._v(" "),a("h3",{attrs:{id:"_2-使用规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用规则"}},[t._v("#")]),t._v(" 2.使用规则")]),t._v(" "),a("p",[t._v("在 Component 构造器的 options 节点中，指定 ==pureDataPattern== 为一个==正则表达式==，字段名符号这个正则表达式的字段将成为纯数据字段，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\toptions: {\n\t\t//指定所有 _ 开头的数据字段为纯数据字段\n\t\tpureDataPattern: /^_/\n\t},\n\tdata: {\n\t\ta: true,\t//普通数据字段\n\t\t_b: true,\t//纯数据字段\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_3-使用纯数据字段改造数据监听器案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用纯数据字段改造数据监听器案例"}},[t._v("#")]),t._v(" 3.使用纯数据字段改造数据监听器案例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\toptions: {\n\t\t//指定所有 _ 开头的数据字段为纯数据字段\n\t\tpureDataPattern: /^_/\n\t},\n\tdata: {\n\t\t//将 rgb 改造为以 _ 开头的纯数据字段\n  \t\t_rgb: { \n    \t\tr: 0,\n    \t\tg: 0,\n    \t\tb: 0\n  \t\t},\n  \t\tfullColor: '0,0,0' //根据 _rgb 对象的三个属性，动态计算 fullColor 的值\n\t}\n})\n")])])]),a("h2",{attrs:{id:"组件的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件的生命周期"}},[t._v("#")]),t._v(" 组件的生命周期")]),t._v(" "),a("h3",{attrs:{id:"_1-组件全部的生命周期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-组件全部的生命周期函数"}},[t._v("#")]),t._v(" 1.组件全部的生命周期函数")]),t._v(" "),a("p",[t._v("小程序组件可用的全部生命周期如下表所示：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("生命周期函数")]),t._v(" "),a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("create")])]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("在组件实例"),a("strong",[t._v("刚刚被创建时执行")])])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("attached")])]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("在组件实例"),a("strong",[t._v("进入页面节点树时执行")])])]),t._v(" "),a("tr",[a("td",[t._v("ready")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("在组件在视图布局完成后执行")])]),t._v(" "),a("tr",[a("td",[t._v("moved")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("在组件实例被移动到节点树另一个位置时执行")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("detached")])]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("在组件实例"),a("strong",[t._v("被从页面节点移除时执行")])])]),t._v(" "),a("tr",[a("td",[t._v("error")]),t._v(" "),a("td",[t._v("Object Error")]),t._v(" "),a("td",[t._v("每当组件方法抛出错误时执行")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-组件主要生命周期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-组件主要生命周期函数"}},[t._v("#")]),t._v(" 2.组件主要生命周期函数")]),t._v(" "),a("p",[t._v("在小程序组件中，最重要的生命周期函数有3个，分别是 ==created==，==attached==，==detached==。特点如下：")]),t._v(" "),a("ol",[a("li",[t._v("组件实例==刚被创建好==的时候，create的 生命周期函数会被触发\n"),a("ul",[a("li",[t._v("此时还不能调用 setData")]),t._v(" "),a("li",[t._v("通常在这个生命周期函数中，只应该用于组件的 this 添加一些自定义的属性字段")])])]),t._v(" "),a("li",[t._v("在组件==完全初始化完毕，进入页面节点树后==，attached 生命周期函数会被触发\n"),a("ul",[a("li",[t._v("此时，this.data 已被初始化完毕")]),t._v(" "),a("li",[t._v("这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发起请求获取初始化数据）")])])]),t._v(" "),a("li",[t._v("在组件==离开页面节点树后==，detached 生命周期函数会触发\n"),a("ul",[a("li",[t._v("退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数")]),t._v(" "),a("li",[t._v("此时适合做一些清理性质的工作")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-lifetimes-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-lifetimes-节点"}},[t._v("#")]),t._v(" 3.lifetimes 节点")]),t._v(" "),a("p",[t._v("在小程序组件中，生命周期函数可以直接定义在 Component 构造器的第一级参数中（和data节点平级），可以在 ==lifetimes 字段== 内进行声明（==这是推荐的方式，其优先级最高==）。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\t//推荐方法\n\tlifetimes: {\n\t\tattached(){},\t//在组件实例进入页面节点树时执行\n\t\tdetached(){},\t//在组件实例从页面节点树移除时执行\n\t},\n\t//以下是旧式的定义方法\n\tattached(){},\t//在组件实例进入页面节点树时执行\n\tdetached(){},\t//在组件实例从页面节点树移除时执行\n})\n")])])]),a("h2",{attrs:{id:"组件所在页面的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件所在页面的生命周期"}},[t._v("#")]),t._v(" 组件所在页面的生命周期")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是组件所在页面的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是组件所在页面的生命周期"}},[t._v("#")]),t._v(" 1. 什么是组件所在页面的生命周期")]),t._v(" "),a("p",[t._v("有时，==自定义的行为依赖于页面状态的变化==，此时就需要用到 ==组件所在页面的生命周期==。")]),t._v(" "),a("p",[t._v("在自定义组件中，组件所在页面的生命周期函数有如下3个，分别是：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("生命周期函数")]),t._v(" "),a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("show")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("组件所在的页面"),a("strong",[t._v("被展示时执行")])])]),t._v(" "),a("tr",[a("td",[t._v("hide")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("组件所在页面"),a("strong",[t._v("被隐藏时执行")])])]),t._v(" "),a("tr",[a("td",[t._v("resize")]),t._v(" "),a("td",[t._v("Object Size")]),t._v(" "),a("td",[t._v("组件所在页面"),a("strong",[t._v("尺寸变化时执行")])])])])]),t._v(" "),a("h3",{attrs:{id:"_2-pagelifetimes-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-pagelifetimes-节点"}},[t._v("#")]),t._v(" 2.pageLifetimes 节点")]),t._v(" "),a("p",[t._v("组件所在页面的生命周期函数，需要定义在 ==pageLifetimes 节点== 中，"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tpageLifetimes:{\n\t\tshow: function(){},\t//页面被展示\n\t\thide: function(){},\t//页面被隐藏\n\t\tresize: function(size){}//页面尺寸变化\n\t}\n})\n")])])]),a("h3",{attrs:{id:"_3-生成随机-rgb-颜色值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-生成随机-rgb-颜色值"}},[t._v("#")]),t._v(" 3.生成随机 RGB 颜色值")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\tmethods: {\n\t//生成随机 RGB 颜色的方法。非事件处理函数建议以 _ 开头\n\t\t_randomColor(){\n\t\t\tthis.setData({\t//为 data 里面的 _rgb 纯数据字段重新赋值\n\t\t\t\t_rgb: {\n\t\t\t\t\tr: Math.floor(Math.random() * 256),\n\t\t\t\t\tg: Math.floor(Math.random() * 256),\n\t\t\t\t\tb: Math.floor(Math.random() * 256)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},\n\t\n\tpageLifetimes: {\n\t\t//组件所在的页面被展示时，立即调用 _randomColor 生成随机颜色值\n\t\tshow: function(){\n\t\t\tthis._randomColor()\n\t\t}\n\t}\n})\n")])])]),a("h2",{attrs:{id:"插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插槽"}},[t._v("#")]),t._v(" 插槽")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是插槽"}},[t._v("#")]),t._v(" 1.什么是插槽")]),t._v(" "),a("p",[t._v("在自定义组件的 wxml 结构中，可以提供一个 ==<slot>== 节点（插槽），==用于承担组件使用者提供的 wxml 结构==。")]),t._v(" "),a("h3",{attrs:{id:"_2-单个插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-单个插槽"}},[t._v("#")]),t._v(" 2.单个插槽")]),t._v(" "),a("p",[t._v("在小程序中，默认每个自定义组件中只允许使用一个 <slot> 进行占位，这种个数上的限制叫做单个插槽。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- 组件的封装者 --\x3e\n<view class="wrapper">\n\t<view>这里是组件的内部节点</view>\n\t\x3c!-- 对于不确定的内容，可以使用 <slot> 进行占位，具体的内容由组件的使用者决定 --\x3e\n\t<slot></slot>\n</view>\n\n\x3c!-- 组件的使用者 --\x3e\n<component-tag-name>\n\t\x3c!-- 这部分内容将被放置在组件 <slot> 的位置上 --\x3e\n\t<view>这里是插入到组件slot中的内容</view>\n</component-tag-name>\n')])])]),a("h3",{attrs:{id:"_3-启用多个插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-启用多个插槽"}},[t._v("#")]),t._v(" 3.启用多个插槽")]),t._v(" "),a("p",[t._v("在小程序的自定义组件中，需要使用多 <slot> 插槽时，可以在组件的 .js 文件中，通过如下方式进行启用。")]),t._v(" "),a("p",[a("em",[t._v("示例代码入下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Component({\n\toptions: {\t\t//与data节点平级\n\t\tmultipleSlots: true\t//在组件定义时的选项中启用多 slot 支持\n\t},\n\tproperties: { /*...*/ },\n\tmethods: { /*...*/ }\n})\n")])])]),a("h3",{attrs:{id:"_4-定义多个插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-定义多个插槽"}},[t._v("#")]),t._v(" 4.定义多个插槽")]),t._v(" "),a("p",[t._v("可以在组件的 .wxml 中使用多个 <slot> 标签，以不同的 ==name== 来区分不同的插槽。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- 组件模板 --\x3e\n<view class="wrapper">\n\t\x3c!-- name 为 before 的第一个 slot 插槽 --\x3e\n\t<slot name="before"></slot>\n\t<view>这是一段固定的文本内容</view>\n\t\x3c!-- name 为 after 的第二个 slot 插槽 --\x3e\n\t<slot name="after"></slot>\n</view>\n')])])]),a("p",[t._v("在使用==带有多个插槽的自定义组件==时，需要用 ==slot属性==来将节点插入到不同的 <slot> 中。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\x3c!-- 引用组件的页面模板 --\x3e\n<component-tag-name>\n\t\x3c!-- 这部分内容将被放置在组件 <slot name="before"> 的位置上 --\x3e\n\t<view slot name="before">这里是插入到组件 slot name="before" 中的内容</view>\n\t\x3c!-- 这部分内容将被放置在组件 <slot name="before"> 的位置上 --\x3e\n\t<view slot name="after">这里是插入到组件 slot name="after" 中的内容</view>\n</component-tag-name>\n')])])]),a("h2",{attrs:{id:"父子组件之间的通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#父子组件之间的通信"}},[t._v("#")]),t._v(" 父子组件之间的通信")]),t._v(" "),a("h3",{attrs:{id:"_1-父子组件之间通信的3种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-父子组件之间通信的3种方式"}},[t._v("#")]),t._v(" 1.父子组件之间通信的3种方式")]),t._v(" "),a("ol",[a("li",[t._v("属性绑定\n"),a("ul",[a("li",[t._v("用于父组件向子组件的指定属性设置数据，==仅能设置 JSON 兼容的数据==")])])]),t._v(" "),a("li",[t._v("事件绑定\n"),a("ul",[a("li",[t._v("用于子组件向父组件传递数据，可以传递任意数据")])])]),t._v(" "),a("li",[t._v("this.selectComponent( 'id或class选择器' )\n"),a("ul",[a("li",[t._v("父组件还可以通过 this.selectComponent() 获取子组件实例对象")]),t._v(" "),a("li",[t._v("这样就可以直接访问子组件的任意数据和方法")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-属性绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-属性绑定"}},[t._v("#")]),t._v(" 2.属性绑定")]),t._v(" "),a("p",[t._v("==属性绑定==用于实现==父向子传值==，而且==只能传递普通类型的数据==，无法将方法传递给子组件。父组件的"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//父组件的 data 节点\ndata: {\n\tcount: 0\n}\n\n//父组件的 wxml结构\n<my-test5 count="{{count}}"></my-test5>\n<view>~~~~~~</view>\n<view>父组件中，count值为：{{count}}</view>\n')])])]),a("p",[t._v("子组件子 ==properties== 节点中==声明对应的属性并使用==。"),a("em",[t._v("示例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//子组件的 properties 节点\nproperties: {\n\tcount: Number\n}\n\n//子组件的 .wxml 结构\n<test>子组件中，count值为：{{count}}</test>\n")])])]),a("h3",{attrs:{id:"_3-事件绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-事件绑定"}},[t._v("#")]),t._v(" 3.事件绑定")]),t._v(" "),a("p",[t._v("==事件绑定==用于实现==子向父传值==，可以传递任何类型的数据。"),a("em",[t._v("使用步骤如下：")])]),t._v(" "),a("ol",[a("li",[t._v("在==父组件==的 .js 中，定义一个函数，这个函数==即将==通过自定义事件的形式，传递给子组件")]),t._v(" "),a("li",[t._v("在==父组件==的 .wxml 中，通过==自定义事件==的形式，将步骤 1 中定义的函数引用，传递给子组件")]),t._v(" "),a("li",[t._v("在"),a("strong",[t._v("子组件")]),t._v("的 .js 中，通过调用 ==this.triggerEvent( '自定义事件名称 ', { /*参数对象*/} )==，将数据发送到父组件")]),t._v(" "),a("li",[t._v("在==父组件==的 .js 中，通过 ==e.detail== 获取到子组件传递过来的数据")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//在父组件中定义 syncCount 方法\n//将来，这个方法会被传递给子组件，供子组件进行调用\nsyncCount(){\n\tconsole.log('syncCount')\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//父组件中的 wxml 结构\n\x3c!-- 使用 bind:自定义事件名称(推荐：结构清晰) --\x3e\n<my-test5 count="{{count}}" bind:sync="syncCount"></my-test5>\n\n\x3c!-- 或在 bind 后面直接写上自定义事件名称 --\x3e\n<my-test5 count="{{count}}" bindsync="syncCount"></my-test5>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//子组件中的 wxml 结构\n<text>子组件中，count值为：{{count}}</text>\n<button type="primary" bindtap="addCount">+1<button>\n\n//子组件中的 js 文件\nmethods:{\n\taddCount(){\n\t\tthis.setData({\n\t\t\tcount: this.properties.count + 1\n\t\t})\n\t\t//触发自定义事件，将数值同步给父组件（触发事件的同时还可以传递参数）\n\t\tthis.triggerEvent(\'sync\',{value: this.properties.count})\n\t}\n}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//父组件中的 js 文件\n//传递的参数通过形参 e 接收\nsyncCount(e){\n    // console.log('syncCount')\n    // console.log(e)\n    // console.log(e.detail.value)\n    \n\tthis.setData({\n\t\tcount: e.detail.value\n\t})\n}\n")])])]),a("h3",{attrs:{id:"_4-获取组件实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-获取组件实例"}},[t._v("#")]),t._v(" 4.获取组件实例")]),t._v(" "),a("p",[t._v('可在父组件里调用 ==this.selectComponent( "id或class选择器" )==，获取子组件的示例对象，从而直接访问子组件的任意数据和方法。调用时需要传入一个==选择器==，例如 this.selectComponent( ".my-component" )。')]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//父组件中的 wxml 结构\n<my-test5 count="{{count}}" bind:sync="syncCount" class="customA" id="cA"></my-test5>\n<button bindtap="getChild">获取子组件的实例对象</button>\n\n//父组件中的 js 文件\n//按钮的 tap 事件处理函数\ngetChild() {\n\t//切记下面参数不能传递标签选择器 \'my-test5\'，不然返回的的是null\n  const child = this.selectComponent(\'.customA\')\t//也可以传递 id选择器 #cA\n  child.setData({\n    count: child.properties.count + 1\n  })\t\t\t//调用子组件的 setData 方法\n  \n  child.addCount()\t\t//调用子组件的 addCount 方法\n},\n')])])]),a("h2",{attrs:{id:"behaviors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#behaviors"}},[t._v("#")]),t._v(" behaviors")]),t._v(" "),a("h3",{attrs:{id:"_1-什么是-behaviors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-behaviors"}},[t._v("#")]),t._v(" 1.什么是 behaviors")]),t._v(" "),a("p",[t._v('behaviors 是小程序中，==用于实现组件间代码共享==的特性，类似于 Vue.js 中的 "mixins"。')]),t._v(" "),a("h3",{attrs:{id:"_2-behaviors-的工作方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-behaviors-的工作方式"}},[t._v("#")]),t._v(" 2.behaviors 的工作方式")]),t._v(" "),a("p",[t._v("每个 behavior 可以包含一组==属性==、==数据==、==生命周期函数== 和 ==方法==。组件引用它时，它的属性、数据和方法==会被合并到组件中==。")]),t._v(" "),a("p",[t._v("每个组件可以引用多个 behavior，behavior 也可以引用其它 behavior。")]),t._v(" "),a("h3",{attrs:{id:"_3-创建-behavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建-behavior"}},[t._v("#")]),t._v(" 3..创建 behavior")]),t._v(" "),a("p",[t._v("调用 ==Behavior(Object object)== 方法即可创建一个==共享的 behavior 实例对象==，供所有的组件使用：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//调用 Behavior() 方法，创建实例对象\n//并使用 module.exports 将 behavior 实例对象共享出去\nmodule.exports = Behavior({\n\t//属性节点\n\tproperties: {},\n\t//私有数据节点\n\tdata: {username: 'zs'},\n\t//事件处理函数和自定义方法节点\n\tmethods: {},\n\t//其他节点...\n})\n")])])]),a("h3",{attrs:{id:"_4-导入并使用-behavior"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-导入并使用-behavior"}},[t._v("#")]),t._v(" 4.导入并使用 behavior")]),t._v(" "),a("p",[t._v("在组件中，使用 ==require()== 方法导入需要的 behavior，==挂载后即可访问 behavior 中的数据或方法==，"),a("em",[t._v("实例代码如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('// 1.使用 require() 导入需要的自定义 behavior 模块\nconst myBehavior = require("../../behaviors/my-behavior")\n\nComponent({\n// 2.将导入的 behavior 实例对象，挂载到 behaviors 组件节点中，即可生效\n\tbehaviors: [myBehavior],\n\t//组件的其他节点\n})\n\n//页面的 wxml 结构\n<view>在behavior中定义的用户名是：{{username}}</view>\n')])])]),a("h3",{attrs:{id:"_5-behavior-中所有可用的节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-behavior-中所有可用的节点"}},[t._v("#")]),t._v(" 5. behavior 中所有可用的节点")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("可用的节点")]),t._v(" "),a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("是否必填")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("==properties==")]),t._v(" "),a("td",[t._v("Object Map")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("同组件的属性")])]),t._v(" "),a("tr",[a("td",[t._v("==data==")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("同组件的数据")])]),t._v(" "),a("tr",[a("td",[t._v("==methods==")]),t._v(" "),a("td",[t._v("Object")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("同自定义组件的方法")])]),t._v(" "),a("tr",[a("td",[t._v("==behaviors==")]),t._v(" "),a("td",[t._v("String Array")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("引入其它的 behavior")])]),t._v(" "),a("tr",[a("td",[t._v("created")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("生命周期函数")])]),t._v(" "),a("tr",[a("td",[t._v("attached")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("生命周期函数")])]),t._v(" "),a("tr",[a("td",[t._v("ready")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("生命周期函数")])]),t._v(" "),a("tr",[a("td",[t._v("moved")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("生命周期函数")])]),t._v(" "),a("tr",[a("td",[t._v("detached")]),t._v(" "),a("td",[t._v("Function")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("生命周期函数")])])])]),t._v(" "),a("h3",{attrs:{id:"_6-同名字段的覆盖和组合规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-同名字段的覆盖和组合规则"}},[t._v("#")]),t._v(" 6.同名字段的覆盖和组合规则*")]),t._v(" "),a("p",[t._v("组件和它引用的 behavior 中==可以包含同名的字段==，此时可以参考如下 3 种同名时的处理规则：")]),t._v(" "),a("ol",[a("li",[t._v("同名的数据字段（data）")]),t._v(" "),a("li",[t._v("同名的属性（properties）或方法（methods）")]),t._v(" "),a("li",[t._v("同名的生命周期函数")])]),t._v(" "),a("p",[t._v("详细请参考开发者文档：")]),t._v(" "),a("p",[t._v("https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html")])])}),[],!1,null,null,null);a.default=n.exports}}]);